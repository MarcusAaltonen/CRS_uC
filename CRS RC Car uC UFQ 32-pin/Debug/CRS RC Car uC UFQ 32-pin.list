
CRS RC Car uC UFQ 32-pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dcc  08002dcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dd4  08002dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08002de8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002de8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000939a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a0  00000000  00000000  000293ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102e9  00000000  00000000  0002bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e8d  00000000  00000000  0003bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064c8f  00000000  00000000  00045e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aaabd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a4  00000000  00000000  000aab10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d18 	.word	0x08002d18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d18 	.word	0x08002d18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 fa20 	bl	8000714 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 fa1b 	bl	8000714 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fdiv>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	464f      	mov	r7, r9
 800044c:	4646      	mov	r6, r8
 800044e:	46d6      	mov	lr, sl
 8000450:	0245      	lsls	r5, r0, #9
 8000452:	b5c0      	push	{r6, r7, lr}
 8000454:	0047      	lsls	r7, r0, #1
 8000456:	1c0c      	adds	r4, r1, #0
 8000458:	0a6d      	lsrs	r5, r5, #9
 800045a:	0e3f      	lsrs	r7, r7, #24
 800045c:	0fc6      	lsrs	r6, r0, #31
 800045e:	2f00      	cmp	r7, #0
 8000460:	d066      	beq.n	8000530 <__aeabi_fdiv+0xe8>
 8000462:	2fff      	cmp	r7, #255	; 0xff
 8000464:	d06c      	beq.n	8000540 <__aeabi_fdiv+0xf8>
 8000466:	2300      	movs	r3, #0
 8000468:	00ea      	lsls	r2, r5, #3
 800046a:	2580      	movs	r5, #128	; 0x80
 800046c:	4699      	mov	r9, r3
 800046e:	469a      	mov	sl, r3
 8000470:	04ed      	lsls	r5, r5, #19
 8000472:	4315      	orrs	r5, r2
 8000474:	3f7f      	subs	r7, #127	; 0x7f
 8000476:	0260      	lsls	r0, r4, #9
 8000478:	0061      	lsls	r1, r4, #1
 800047a:	0a43      	lsrs	r3, r0, #9
 800047c:	4698      	mov	r8, r3
 800047e:	0e09      	lsrs	r1, r1, #24
 8000480:	0fe4      	lsrs	r4, r4, #31
 8000482:	2900      	cmp	r1, #0
 8000484:	d048      	beq.n	8000518 <__aeabi_fdiv+0xd0>
 8000486:	29ff      	cmp	r1, #255	; 0xff
 8000488:	d010      	beq.n	80004ac <__aeabi_fdiv+0x64>
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	00d8      	lsls	r0, r3, #3
 800048e:	04d2      	lsls	r2, r2, #19
 8000490:	4302      	orrs	r2, r0
 8000492:	4690      	mov	r8, r2
 8000494:	2000      	movs	r0, #0
 8000496:	397f      	subs	r1, #127	; 0x7f
 8000498:	464a      	mov	r2, r9
 800049a:	0033      	movs	r3, r6
 800049c:	1a7f      	subs	r7, r7, r1
 800049e:	4302      	orrs	r2, r0
 80004a0:	496c      	ldr	r1, [pc, #432]	; (8000654 <__aeabi_fdiv+0x20c>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	588a      	ldr	r2, [r1, r2]
 80004a6:	4063      	eors	r3, r4
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4697      	mov	pc, r2
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d16d      	bne.n	800058c <__aeabi_fdiv+0x144>
 80004b0:	2002      	movs	r0, #2
 80004b2:	3fff      	subs	r7, #255	; 0xff
 80004b4:	e033      	b.n	800051e <__aeabi_fdiv+0xd6>
 80004b6:	2300      	movs	r3, #0
 80004b8:	4698      	mov	r8, r3
 80004ba:	0026      	movs	r6, r4
 80004bc:	4645      	mov	r5, r8
 80004be:	4682      	mov	sl, r0
 80004c0:	4653      	mov	r3, sl
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fdiv+0x80>
 80004c6:	e07f      	b.n	80005c8 <__aeabi_fdiv+0x180>
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d100      	bne.n	80004ce <__aeabi_fdiv+0x86>
 80004cc:	e094      	b.n	80005f8 <__aeabi_fdiv+0x1b0>
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d017      	beq.n	8000502 <__aeabi_fdiv+0xba>
 80004d2:	0038      	movs	r0, r7
 80004d4:	307f      	adds	r0, #127	; 0x7f
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd5f      	ble.n	800059a <__aeabi_fdiv+0x152>
 80004da:	076b      	lsls	r3, r5, #29
 80004dc:	d004      	beq.n	80004e8 <__aeabi_fdiv+0xa0>
 80004de:	230f      	movs	r3, #15
 80004e0:	402b      	ands	r3, r5
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fdiv+0xa0>
 80004e6:	3504      	adds	r5, #4
 80004e8:	012b      	lsls	r3, r5, #4
 80004ea:	d503      	bpl.n	80004f4 <__aeabi_fdiv+0xac>
 80004ec:	0038      	movs	r0, r7
 80004ee:	4b5a      	ldr	r3, [pc, #360]	; (8000658 <__aeabi_fdiv+0x210>)
 80004f0:	3080      	adds	r0, #128	; 0x80
 80004f2:	401d      	ands	r5, r3
 80004f4:	28fe      	cmp	r0, #254	; 0xfe
 80004f6:	dc67      	bgt.n	80005c8 <__aeabi_fdiv+0x180>
 80004f8:	01ad      	lsls	r5, r5, #6
 80004fa:	0a6d      	lsrs	r5, r5, #9
 80004fc:	b2c0      	uxtb	r0, r0
 80004fe:	e002      	b.n	8000506 <__aeabi_fdiv+0xbe>
 8000500:	001e      	movs	r6, r3
 8000502:	2000      	movs	r0, #0
 8000504:	2500      	movs	r5, #0
 8000506:	05c0      	lsls	r0, r0, #23
 8000508:	4328      	orrs	r0, r5
 800050a:	07f6      	lsls	r6, r6, #31
 800050c:	4330      	orrs	r0, r6
 800050e:	bce0      	pop	{r5, r6, r7}
 8000510:	46ba      	mov	sl, r7
 8000512:	46b1      	mov	r9, r6
 8000514:	46a8      	mov	r8, r5
 8000516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000518:	2b00      	cmp	r3, #0
 800051a:	d12b      	bne.n	8000574 <__aeabi_fdiv+0x12c>
 800051c:	2001      	movs	r0, #1
 800051e:	464a      	mov	r2, r9
 8000520:	0033      	movs	r3, r6
 8000522:	494e      	ldr	r1, [pc, #312]	; (800065c <__aeabi_fdiv+0x214>)
 8000524:	4302      	orrs	r2, r0
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	588a      	ldr	r2, [r1, r2]
 800052a:	4063      	eors	r3, r4
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4697      	mov	pc, r2
 8000530:	2d00      	cmp	r5, #0
 8000532:	d113      	bne.n	800055c <__aeabi_fdiv+0x114>
 8000534:	2304      	movs	r3, #4
 8000536:	4699      	mov	r9, r3
 8000538:	3b03      	subs	r3, #3
 800053a:	2700      	movs	r7, #0
 800053c:	469a      	mov	sl, r3
 800053e:	e79a      	b.n	8000476 <__aeabi_fdiv+0x2e>
 8000540:	2d00      	cmp	r5, #0
 8000542:	d105      	bne.n	8000550 <__aeabi_fdiv+0x108>
 8000544:	2308      	movs	r3, #8
 8000546:	4699      	mov	r9, r3
 8000548:	3b06      	subs	r3, #6
 800054a:	27ff      	movs	r7, #255	; 0xff
 800054c:	469a      	mov	sl, r3
 800054e:	e792      	b.n	8000476 <__aeabi_fdiv+0x2e>
 8000550:	230c      	movs	r3, #12
 8000552:	4699      	mov	r9, r3
 8000554:	3b09      	subs	r3, #9
 8000556:	27ff      	movs	r7, #255	; 0xff
 8000558:	469a      	mov	sl, r3
 800055a:	e78c      	b.n	8000476 <__aeabi_fdiv+0x2e>
 800055c:	0028      	movs	r0, r5
 800055e:	f000 f8bb 	bl	80006d8 <__clzsi2>
 8000562:	2776      	movs	r7, #118	; 0x76
 8000564:	1f43      	subs	r3, r0, #5
 8000566:	409d      	lsls	r5, r3
 8000568:	2300      	movs	r3, #0
 800056a:	427f      	negs	r7, r7
 800056c:	4699      	mov	r9, r3
 800056e:	469a      	mov	sl, r3
 8000570:	1a3f      	subs	r7, r7, r0
 8000572:	e780      	b.n	8000476 <__aeabi_fdiv+0x2e>
 8000574:	0018      	movs	r0, r3
 8000576:	f000 f8af 	bl	80006d8 <__clzsi2>
 800057a:	4642      	mov	r2, r8
 800057c:	1f43      	subs	r3, r0, #5
 800057e:	2176      	movs	r1, #118	; 0x76
 8000580:	409a      	lsls	r2, r3
 8000582:	4249      	negs	r1, r1
 8000584:	1a09      	subs	r1, r1, r0
 8000586:	4690      	mov	r8, r2
 8000588:	2000      	movs	r0, #0
 800058a:	e785      	b.n	8000498 <__aeabi_fdiv+0x50>
 800058c:	21ff      	movs	r1, #255	; 0xff
 800058e:	2003      	movs	r0, #3
 8000590:	e782      	b.n	8000498 <__aeabi_fdiv+0x50>
 8000592:	001e      	movs	r6, r3
 8000594:	20ff      	movs	r0, #255	; 0xff
 8000596:	2500      	movs	r5, #0
 8000598:	e7b5      	b.n	8000506 <__aeabi_fdiv+0xbe>
 800059a:	2301      	movs	r3, #1
 800059c:	1a1b      	subs	r3, r3, r0
 800059e:	2b1b      	cmp	r3, #27
 80005a0:	dcaf      	bgt.n	8000502 <__aeabi_fdiv+0xba>
 80005a2:	379e      	adds	r7, #158	; 0x9e
 80005a4:	0029      	movs	r1, r5
 80005a6:	40bd      	lsls	r5, r7
 80005a8:	40d9      	lsrs	r1, r3
 80005aa:	1e6a      	subs	r2, r5, #1
 80005ac:	4195      	sbcs	r5, r2
 80005ae:	430d      	orrs	r5, r1
 80005b0:	076b      	lsls	r3, r5, #29
 80005b2:	d004      	beq.n	80005be <__aeabi_fdiv+0x176>
 80005b4:	230f      	movs	r3, #15
 80005b6:	402b      	ands	r3, r5
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d000      	beq.n	80005be <__aeabi_fdiv+0x176>
 80005bc:	3504      	adds	r5, #4
 80005be:	016b      	lsls	r3, r5, #5
 80005c0:	d544      	bpl.n	800064c <__aeabi_fdiv+0x204>
 80005c2:	2001      	movs	r0, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	e79e      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005c8:	20ff      	movs	r0, #255	; 0xff
 80005ca:	2500      	movs	r5, #0
 80005cc:	e79b      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005ce:	2580      	movs	r5, #128	; 0x80
 80005d0:	2600      	movs	r6, #0
 80005d2:	20ff      	movs	r0, #255	; 0xff
 80005d4:	03ed      	lsls	r5, r5, #15
 80005d6:	e796      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005d8:	2300      	movs	r3, #0
 80005da:	4698      	mov	r8, r3
 80005dc:	2080      	movs	r0, #128	; 0x80
 80005de:	03c0      	lsls	r0, r0, #15
 80005e0:	4205      	tst	r5, r0
 80005e2:	d009      	beq.n	80005f8 <__aeabi_fdiv+0x1b0>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4203      	tst	r3, r0
 80005e8:	d106      	bne.n	80005f8 <__aeabi_fdiv+0x1b0>
 80005ea:	4645      	mov	r5, r8
 80005ec:	4305      	orrs	r5, r0
 80005ee:	026d      	lsls	r5, r5, #9
 80005f0:	0026      	movs	r6, r4
 80005f2:	20ff      	movs	r0, #255	; 0xff
 80005f4:	0a6d      	lsrs	r5, r5, #9
 80005f6:	e786      	b.n	8000506 <__aeabi_fdiv+0xbe>
 80005f8:	2080      	movs	r0, #128	; 0x80
 80005fa:	03c0      	lsls	r0, r0, #15
 80005fc:	4305      	orrs	r5, r0
 80005fe:	026d      	lsls	r5, r5, #9
 8000600:	20ff      	movs	r0, #255	; 0xff
 8000602:	0a6d      	lsrs	r5, r5, #9
 8000604:	e77f      	b.n	8000506 <__aeabi_fdiv+0xbe>
 8000606:	4641      	mov	r1, r8
 8000608:	016a      	lsls	r2, r5, #5
 800060a:	0148      	lsls	r0, r1, #5
 800060c:	4282      	cmp	r2, r0
 800060e:	d219      	bcs.n	8000644 <__aeabi_fdiv+0x1fc>
 8000610:	211b      	movs	r1, #27
 8000612:	2500      	movs	r5, #0
 8000614:	3f01      	subs	r7, #1
 8000616:	2601      	movs	r6, #1
 8000618:	0014      	movs	r4, r2
 800061a:	006d      	lsls	r5, r5, #1
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	2c00      	cmp	r4, #0
 8000620:	db01      	blt.n	8000626 <__aeabi_fdiv+0x1de>
 8000622:	4290      	cmp	r0, r2
 8000624:	d801      	bhi.n	800062a <__aeabi_fdiv+0x1e2>
 8000626:	1a12      	subs	r2, r2, r0
 8000628:	4335      	orrs	r5, r6
 800062a:	3901      	subs	r1, #1
 800062c:	2900      	cmp	r1, #0
 800062e:	d1f3      	bne.n	8000618 <__aeabi_fdiv+0x1d0>
 8000630:	1e50      	subs	r0, r2, #1
 8000632:	4182      	sbcs	r2, r0
 8000634:	0038      	movs	r0, r7
 8000636:	307f      	adds	r0, #127	; 0x7f
 8000638:	001e      	movs	r6, r3
 800063a:	4315      	orrs	r5, r2
 800063c:	2800      	cmp	r0, #0
 800063e:	dd00      	ble.n	8000642 <__aeabi_fdiv+0x1fa>
 8000640:	e74b      	b.n	80004da <__aeabi_fdiv+0x92>
 8000642:	e7aa      	b.n	800059a <__aeabi_fdiv+0x152>
 8000644:	211a      	movs	r1, #26
 8000646:	2501      	movs	r5, #1
 8000648:	1a12      	subs	r2, r2, r0
 800064a:	e7e4      	b.n	8000616 <__aeabi_fdiv+0x1ce>
 800064c:	01ad      	lsls	r5, r5, #6
 800064e:	2000      	movs	r0, #0
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	e758      	b.n	8000506 <__aeabi_fdiv+0xbe>
 8000654:	08002d30 	.word	0x08002d30
 8000658:	f7ffffff 	.word	0xf7ffffff
 800065c:	08002d70 	.word	0x08002d70

08000660 <__aeabi_ui2f>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	1e05      	subs	r5, r0, #0
 8000664:	d00e      	beq.n	8000684 <__aeabi_ui2f+0x24>
 8000666:	f000 f837 	bl	80006d8 <__clzsi2>
 800066a:	239e      	movs	r3, #158	; 0x9e
 800066c:	0004      	movs	r4, r0
 800066e:	1a1b      	subs	r3, r3, r0
 8000670:	2b96      	cmp	r3, #150	; 0x96
 8000672:	dc0c      	bgt.n	800068e <__aeabi_ui2f+0x2e>
 8000674:	2808      	cmp	r0, #8
 8000676:	dd01      	ble.n	800067c <__aeabi_ui2f+0x1c>
 8000678:	3c08      	subs	r4, #8
 800067a:	40a5      	lsls	r5, r4
 800067c:	026d      	lsls	r5, r5, #9
 800067e:	0a6d      	lsrs	r5, r5, #9
 8000680:	b2d8      	uxtb	r0, r3
 8000682:	e001      	b.n	8000688 <__aeabi_ui2f+0x28>
 8000684:	2000      	movs	r0, #0
 8000686:	2500      	movs	r5, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	4328      	orrs	r0, r5
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	2b99      	cmp	r3, #153	; 0x99
 8000690:	dd09      	ble.n	80006a6 <__aeabi_ui2f+0x46>
 8000692:	0002      	movs	r2, r0
 8000694:	0029      	movs	r1, r5
 8000696:	321b      	adds	r2, #27
 8000698:	4091      	lsls	r1, r2
 800069a:	1e4a      	subs	r2, r1, #1
 800069c:	4191      	sbcs	r1, r2
 800069e:	2205      	movs	r2, #5
 80006a0:	1a12      	subs	r2, r2, r0
 80006a2:	40d5      	lsrs	r5, r2
 80006a4:	430d      	orrs	r5, r1
 80006a6:	2c05      	cmp	r4, #5
 80006a8:	dd01      	ble.n	80006ae <__aeabi_ui2f+0x4e>
 80006aa:	1f62      	subs	r2, r4, #5
 80006ac:	4095      	lsls	r5, r2
 80006ae:	0029      	movs	r1, r5
 80006b0:	4e08      	ldr	r6, [pc, #32]	; (80006d4 <__aeabi_ui2f+0x74>)
 80006b2:	4031      	ands	r1, r6
 80006b4:	076a      	lsls	r2, r5, #29
 80006b6:	d009      	beq.n	80006cc <__aeabi_ui2f+0x6c>
 80006b8:	200f      	movs	r0, #15
 80006ba:	4028      	ands	r0, r5
 80006bc:	2804      	cmp	r0, #4
 80006be:	d005      	beq.n	80006cc <__aeabi_ui2f+0x6c>
 80006c0:	3104      	adds	r1, #4
 80006c2:	014a      	lsls	r2, r1, #5
 80006c4:	d502      	bpl.n	80006cc <__aeabi_ui2f+0x6c>
 80006c6:	239f      	movs	r3, #159	; 0x9f
 80006c8:	4031      	ands	r1, r6
 80006ca:	1b1b      	subs	r3, r3, r4
 80006cc:	0189      	lsls	r1, r1, #6
 80006ce:	0a4d      	lsrs	r5, r1, #9
 80006d0:	b2d8      	uxtb	r0, r3
 80006d2:	e7d9      	b.n	8000688 <__aeabi_ui2f+0x28>
 80006d4:	fbffffff 	.word	0xfbffffff

080006d8 <__clzsi2>:
 80006d8:	211c      	movs	r1, #28
 80006da:	2301      	movs	r3, #1
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	4298      	cmp	r0, r3
 80006e0:	d301      	bcc.n	80006e6 <__clzsi2+0xe>
 80006e2:	0c00      	lsrs	r0, r0, #16
 80006e4:	3910      	subs	r1, #16
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	4298      	cmp	r0, r3
 80006ea:	d301      	bcc.n	80006f0 <__clzsi2+0x18>
 80006ec:	0a00      	lsrs	r0, r0, #8
 80006ee:	3908      	subs	r1, #8
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	4298      	cmp	r0, r3
 80006f4:	d301      	bcc.n	80006fa <__clzsi2+0x22>
 80006f6:	0900      	lsrs	r0, r0, #4
 80006f8:	3904      	subs	r1, #4
 80006fa:	a202      	add	r2, pc, #8	; (adr r2, 8000704 <__clzsi2+0x2c>)
 80006fc:	5c10      	ldrb	r0, [r2, r0]
 80006fe:	1840      	adds	r0, r0, r1
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	02020304 	.word	0x02020304
 8000708:	01010101 	.word	0x01010101
	...

08000714 <__clzdi2>:
 8000714:	b510      	push	{r4, lr}
 8000716:	2900      	cmp	r1, #0
 8000718:	d103      	bne.n	8000722 <__clzdi2+0xe>
 800071a:	f7ff ffdd 	bl	80006d8 <__clzsi2>
 800071e:	3020      	adds	r0, #32
 8000720:	e002      	b.n	8000728 <__clzdi2+0x14>
 8000722:	1c08      	adds	r0, r1, #0
 8000724:	f7ff ffd8 	bl	80006d8 <__clzsi2>
 8000728:	bd10      	pop	{r4, pc}
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <HAL_TIM_IC_CaptureCallback>:

/* Measure Frequency */
float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7e1b      	ldrb	r3, [r3, #24]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d157      	bne.n	80007ec <HAL_TIM_IC_CaptureCallback+0xc0>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d113      	bne.n	800076c <HAL_TIM_IC_CaptureCallback+0x40>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	005a      	lsls	r2, r3, #1
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fdf7 	bl	8001342 <HAL_GPIO_TogglePin>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f001 ffed 	bl	8002738 <HAL_TIM_ReadCapturedValue>
 800075e:	0002      	movs	r2, r0
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000762:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]

			//__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 800076a:	e03f      	b.n	80007ec <HAL_TIM_IC_CaptureCallback+0xc0>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	005a      	lsls	r2, r3, #1
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fde3 	bl	8001342 <HAL_GPIO_TogglePin>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f001 ffd9 	bl	8002738 <HAL_TIM_ReadCapturedValue>
 8000786:	0002      	movs	r2, r0
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 800078a:	601a      	str	r2, [r3, #0]
			if (IC_Val2 > IC_Val1)
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d907      	bls.n	80007a8 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = IC_Val2-IC_Val1;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1ad2      	subs	r2, r2, r3
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e00e      	b.n	80007c6 <HAL_TIM_IC_CaptureCallback+0x9a>
			else if (IC_Val1 > IC_Val2)
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d908      	bls.n	80007c6 <HAL_TIM_IC_CaptureCallback+0x9a>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80007c0:	189a      	adds	r2, r3, r2
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80007c4:	601a      	str	r2, [r3, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80007c8:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ff46 	bl	8000660 <__aeabi_ui2f>
 80007d4:	1c03      	adds	r3, r0, #0
 80007d6:	1c19      	adds	r1, r3, #0
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff fe35 	bl	8000448 <__aeabi_fdiv>
 80007de:	1c03      	adds	r3, r0, #0
 80007e0:	1c1a      	adds	r2, r3, #0
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80007e4:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80007e6:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b004      	add	sp, #16
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000034 	.word	0x20000034
 80007f8:	20000028 	.word	0x20000028
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	20000030 	.word	0x20000030
 8000804:	0000ffff 	.word	0x0000ffff
 8000808:	45fff800 	.word	0x45fff800
 800080c:	20000038 	.word	0x20000038

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fac4 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f81a 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f000 f938 	bl	8000a90 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000820:	f000 f86a 	bl	80008f8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000824:	f000 f89a 	bl	800095c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	0059      	lsls	r1, r3, #1
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2201      	movs	r2, #1
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fd68 	bl	8001308 <HAL_GPIO_WritePin>
  // start timer 2 and ch1
  HAL_TIM_Base_Start_IT(&htim2);
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <main+0x3c>)
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fbd0 	bl	8001fe0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <main+0x3c>)
 8000842:	2100      	movs	r1, #0
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fc57 	bl	80020f8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800084a:	e7fe      	b.n	800084a <main+0x3a>
 800084c:	20000094 	.word	0x20000094

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b093      	sub	sp, #76	; 0x4c
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	2414      	movs	r4, #20
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	2334      	movs	r3, #52	; 0x34
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f002 fa51 	bl	8002d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	003b      	movs	r3, r7
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 fa4a 	bl	8002d08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <SystemClock_Config+0xa0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <SystemClock_Config+0xa4>)
 800087a:	401a      	ands	r2, r3
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <SystemClock_Config+0xa0>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0109      	lsls	r1, r1, #4
 8000882:	430a      	orrs	r2, r1
 8000884:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2210      	movs	r2, #16
 800088c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2201      	movs	r2, #1
 8000892:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	22a0      	movs	r2, #160	; 0xa0
 800089e:	0212      	lsls	r2, r2, #8
 80008a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fd64 	bl	8001378 <HAL_RCC_OscConfig>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80008b4:	f000 f93e 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	003b      	movs	r3, r7
 80008ba:	220f      	movs	r2, #15
 80008bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d6:	003b      	movs	r3, r7
 80008d8:	2100      	movs	r1, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 f8c8 	bl	8001a70 <HAL_RCC_ClockConfig>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e4:	f000 f926 	bl	8000b34 <Error_Handler>
  }
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b013      	add	sp, #76	; 0x4c
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	40007000 	.word	0x40007000
 80008f4:	ffffe7ff 	.word	0xffffe7ff

080008f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_SPI1_Init+0x5c>)
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_SPI1_Init+0x60>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI1_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x5c>)
 800093a:	2207      	movs	r2, #7
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <MX_SPI1_Init+0x5c>)
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fa83 	bl	8001e4c <HAL_SPI_Init>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800094a:	f000 f8f3 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000003c 	.word	0x2000003c
 8000958:	40013000 	.word	0x40013000

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	2318      	movs	r3, #24
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	0018      	movs	r0, r3
 8000968:	2310      	movs	r3, #16
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f002 f9cb 	bl	8002d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	2310      	movs	r3, #16
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	0018      	movs	r0, r3
 8000978:	2308      	movs	r3, #8
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f002 f9c3 	bl	8002d08 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	2310      	movs	r3, #16
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f002 f9bc 	bl	8002d08 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000990:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <MX_TIM2_Init+0x12c>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	05d2      	lsls	r2, r2, #23
 8000996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000998:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <MX_TIM2_Init+0x12c>)
 800099a:	220f      	movs	r2, #15
 800099c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009a4:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009a6:	4a39      	ldr	r2, [pc, #228]	; (8000a8c <MX_TIM2_Init+0x130>)
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fad0 	bl	8001f5e <HAL_TIM_Base_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 f8b7 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	2118      	movs	r1, #24
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0152      	lsls	r2, r2, #5
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fdda 	bl	8002590 <HAL_TIM_ConfigClockSource>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80009e0:	f000 f8a8 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_TIM2_Init+0x12c>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 fb3e 	bl	8002068 <HAL_TIM_IC_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009f0:	f000 f8a0 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2110      	movs	r1, #16
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a02:	187a      	adds	r2, r7, r1
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_TIM2_Init+0x12c>)
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f002 f909 	bl	8002c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a12:	f000 f88f 	bl	8000b34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2201      	movs	r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	0039      	movs	r1, r7
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_TIM2_Init+0x12c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 fd07 	bl	8002448 <HAL_TIM_IC_ConfigChannel>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000a3e:	f000 f879 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a42:	0039      	movs	r1, r7
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_TIM2_Init+0x12c>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fcfd 	bl	8002448 <HAL_TIM_IC_ConfigChannel>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000a52:	f000 f86f 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000a56:	0039      	movs	r1, r7
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_TIM2_Init+0x12c>)
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fcf3 	bl	8002448 <HAL_TIM_IC_ConfigChannel>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000a66:	f000 f865 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a6a:	0039      	movs	r1, r7
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_TIM2_Init+0x12c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fce9 	bl	8002448 <HAL_TIM_IC_ConfigChannel>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000a7a:	f000 f85b 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b00a      	add	sp, #40	; 0x28
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000094 	.word	0x20000094
 8000a8c:	0000ffff 	.word	0x0000ffff

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	240c      	movs	r4, #12
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2314      	movs	r3, #20
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f002 f931 	bl	8002d08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000aac:	2104      	movs	r1, #4
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000adc:	2102      	movs	r1, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	0059      	lsls	r1, r3, #1
 8000af2:	23a0      	movs	r3, #160	; 0xa0
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	2200      	movs	r2, #0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 fc05 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2201      	movs	r2, #1
 8000b0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	193a      	adds	r2, r7, r4
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fa8b 	bl	800103c <HAL_GPIO_Init>

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b009      	add	sp, #36	; 0x24
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40021000 	.word	0x40021000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_MspInit+0x24>)
 8000b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x24>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_MspInit+0x24>)
 8000b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_MspInit+0x24>)
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	0549      	lsls	r1, r1, #21
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	240c      	movs	r4, #12
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	0018      	movs	r0, r3
 8000b76:	2314      	movs	r3, #20
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f002 f8c4 	bl	8002d08 <memset>
  if(hspi->Instance==SPI1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d129      	bne.n	8000bde <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_SPI_MspInit+0x84>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0x84>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0149      	lsls	r1, r1, #5
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_SPI_MspInit+0x84>)
 8000b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_SPI_MspInit+0x84>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_SPI_MspInit+0x84>)
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	22f0      	movs	r2, #240	; 0xf0
 8000bb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2202      	movs	r2, #2
 8000bbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fa2f 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b009      	add	sp, #36	; 0x24
 8000be4:	bd90      	pop	{r4, r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40013000 	.word	0x40013000
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	2414      	movs	r4, #20
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f002 f880 	bl	8002d08 <memset>
  if(htim_base->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d151      	bne.n	8000cb8 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	2201      	movs	r2, #1
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c3e:	2102      	movs	r1, #2
 8000c40:	430a      	orrs	r2, r1
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PB0     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	220b      	movs	r2, #11
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	193a      	adds	r2, r7, r4
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f9e0 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2202      	movs	r2, #2
 8000c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2205      	movs	r2, #5
 8000c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_TIM_Base_MspInit+0xd4>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f000 f9ca 	bl	800103c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	200f      	movs	r0, #15
 8000cae:	f000 f993 	bl	8000fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f9a5 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b00b      	add	sp, #44	; 0x2c
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8ac 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <TIM2_IRQHandler+0x14>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 faba 	bl	8002278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	20000094 	.word	0x20000094

08000d10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d22:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d24:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <LoopForever+0xa>)
    CMP R1, R2
 8000d28:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d2a:	d105      	bne.n	8000d38 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d2e:	4913      	ldr	r1, [pc, #76]	; (8000d7c <LoopForever+0x12>)
    STR R1, [R0]
 8000d30:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d34:	4913      	ldr	r1, [pc, #76]	; (8000d84 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d36:	6001      	str	r1, [r0, #0]

08000d38 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d3a:	4914      	ldr	r1, [pc, #80]	; (8000d8c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <LoopForever+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d50:	4c11      	ldr	r4, [pc, #68]	; (8000d98 <LoopForever+0x2e>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d5e:	f7ff ffd7 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f001 ffad 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fd53 	bl	8000810 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
   ldr   r0, =_estack
 8000d6c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000d70:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d74:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000d78:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000d7c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d80:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d84:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d90:	08002ddc 	.word	0x08002ddc
  ldr r2, =_sbss
 8000d94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d98:	200000d8 	.word	0x200000d8

08000d9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_COMP_IRQHandler>
	...

08000da0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x3c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Init+0x3c>)
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f811 	bl	8000de0 <HAL_InitTick>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e001      	b.n	8000dce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dca:	f7ff feb9 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_InitTick+0x5c>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0019      	movs	r1, r3
 8000df2:	23fa      	movs	r3, #250	; 0xfa
 8000df4:	0098      	lsls	r0, r3, #2
 8000df6:	f7ff f987 	bl	8000108 <__udivsi3>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff f982 	bl	8000108 <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f90b 	bl	8001022 <HAL_SYSTICK_Config>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e00f      	b.n	8000e34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d80b      	bhi.n	8000e32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	425b      	negs	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f8d8 	bl	8000fd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_InitTick+0x64>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b003      	add	sp, #12
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001a      	movs	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	18d2      	adds	r2, r2, r3
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000008 	.word	0x20000008
 8000e68:	200000d4 	.word	0x200000d4

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	200000d4 	.word	0x200000d4

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b7f      	cmp	r3, #127	; 0x7f
 8000e92:	d809      	bhi.n	8000ea8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_EnableIRQ+0x30>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec8:	d828      	bhi.n	8000f1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <__NVIC_SetPriority+0xd4>)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	33c0      	adds	r3, #192	; 0xc0
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	589b      	ldr	r3, [r3, r2]
 8000eda:	1dfa      	adds	r2, r7, #7
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	21ff      	movs	r1, #255	; 0xff
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	401a      	ands	r2, r3
 8000ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	401a      	ands	r2, r3
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	0018      	movs	r0, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	4003      	ands	r3, r0
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	481f      	ldr	r0, [pc, #124]	; (8000f88 <__NVIC_SetPriority+0xd4>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	430a      	orrs	r2, r1
 8000f14:	33c0      	adds	r3, #192	; 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f1a:	e031      	b.n	8000f80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <__NVIC_SetPriority+0xd8>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0019      	movs	r1, r3
 8000f24:	230f      	movs	r3, #15
 8000f26:	400b      	ands	r3, r1
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3306      	adds	r3, #6
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	1dfa      	adds	r2, r7, #7
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	400a      	ands	r2, r1
 8000f40:	00d2      	lsls	r2, r2, #3
 8000f42:	21ff      	movs	r1, #255	; 0xff
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	401a      	ands	r2, r3
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	4003      	ands	r3, r0
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <__NVIC_SetPriority+0xd8>)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	001c      	movs	r4, r3
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	4023      	ands	r3, r4
 8000f70:	3b08      	subs	r3, #8
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	430a      	orrs	r2, r1
 8000f76:	3306      	adds	r3, #6
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	18c3      	adds	r3, r0, r3
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b003      	add	sp, #12
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	045b      	lsls	r3, r3, #17
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d301      	bcc.n	8000fa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e010      	b.n	8000fca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <SysTick_Config+0x44>)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	3a01      	subs	r2, #1
 8000fae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff ff7c 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x44>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x44>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	0002      	movs	r2, r0
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ffaf 	bl	8000f90 <SysTick_Config>
 8001032:	0003      	movs	r3, r0
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001052:	e143      	b.n	80012dc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d100      	bne.n	800106c <HAL_GPIO_Init+0x30>
 800106a:	e134      	b.n	80012d6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	43da      	mvns	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	2201      	movs	r2, #1
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d017      	beq.n	8001122 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	4013      	ands	r3, r2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d123      	bne.n	8001176 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	58d3      	ldr	r3, [r2, r3]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2207      	movs	r2, #7
 8001140:	4013      	ands	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2107      	movs	r1, #7
 800115a:	400b      	ands	r3, r1
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	6939      	ldr	r1, [r7, #16]
 8001174:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2203      	movs	r2, #3
 8001194:	401a      	ands	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	029b      	lsls	r3, r3, #10
 80011b2:	4013      	ands	r3, r2
 80011b4:	d100      	bne.n	80011b8 <HAL_GPIO_Init+0x17c>
 80011b6:	e08e      	b.n	80012d6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b8:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011be:	2101      	movs	r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x2bc>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	589b      	ldr	r3, [r3, r2]
 80011d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	23a0      	movs	r3, #160	; 0xa0
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x1d2>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a41      	ldr	r2, [pc, #260]	; (80012fc <HAL_GPIO_Init+0x2c0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x1ce>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a40      	ldr	r2, [pc, #256]	; (8001300 <HAL_GPIO_Init+0x2c4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x1ca>
 8001202:	2302      	movs	r3, #2
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x1d4>
 8001206:	2306      	movs	r3, #6
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x1d4>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x1d4>
 800120e:	2300      	movs	r3, #0
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	2103      	movs	r1, #3
 8001214:	400a      	ands	r2, r1
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2bc>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	035b      	lsls	r3, r3, #13
 800129a:	4013      	ands	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	039b      	lsls	r3, r3, #14
 80012c4:	4013      	ands	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	d000      	beq.n	80012ea <HAL_GPIO_Init+0x2ae>
 80012e8:	e6b4      	b.n	8001054 <HAL_GPIO_Init+0x18>
  }
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	50000400 	.word	0x50000400
 8001300:	50000800 	.word	0x50000800
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	0008      	movs	r0, r1
 8001312:	0011      	movs	r1, r2
 8001314:	1cbb      	adds	r3, r7, #2
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	1c7b      	adds	r3, r7, #1
 800131c:	1c0a      	adds	r2, r1, #0
 800131e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	1c7b      	adds	r3, r7, #1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001332:	1cbb      	adds	r3, r7, #2
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	000a      	movs	r2, r1
 800134c:	1cbb      	adds	r3, r7, #2
 800134e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001356:	1cbb      	adds	r3, r7, #2
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	041a      	lsls	r2, r3, #16
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	1cb9      	adds	r1, r7, #2
 8001366:	8809      	ldrh	r1, [r1, #0]
 8001368:	400b      	ands	r3, r1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f000 fb6c 	bl	8001a64 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138c:	4bc8      	ldr	r3, [pc, #800]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	220c      	movs	r2, #12
 8001392:	4013      	ands	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001396:	4bc6      	ldr	r3, [pc, #792]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	025b      	lsls	r3, r3, #9
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	d100      	bne.n	80013ae <HAL_RCC_OscConfig+0x36>
 80013ac:	e07d      	b.n	80014aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d007      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_OscConfig+0x68>
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10d      	bne.n	80013e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4bba      	ldr	r3, [pc, #744]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	029b      	lsls	r3, r3, #10
 80013cc:	4013      	ands	r3, r2
 80013ce:	d100      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5a>
 80013d0:	e06a      	b.n	80014a8 <HAL_RCC_OscConfig+0x130>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d166      	bne.n	80014a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 fb42 	bl	8001a64 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_OscConfig+0x84>
 80013ec:	4bb0      	ldr	r3, [pc, #704]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4baf      	ldr	r3, [pc, #700]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0249      	lsls	r1, r1, #9
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e027      	b.n	800144c <HAL_RCC_OscConfig+0xd4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	02db      	lsls	r3, r3, #11
 8001404:	429a      	cmp	r2, r3
 8001406:	d10e      	bne.n	8001426 <HAL_RCC_OscConfig+0xae>
 8001408:	4ba9      	ldr	r3, [pc, #676]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4ba8      	ldr	r3, [pc, #672]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	02c9      	lsls	r1, r1, #11
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4ba6      	ldr	r3, [pc, #664]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0249      	lsls	r1, r1, #9
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e012      	b.n	800144c <HAL_RCC_OscConfig+0xd4>
 8001426:	4ba2      	ldr	r3, [pc, #648]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4ba1      	ldr	r3, [pc, #644]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800142c:	49a1      	ldr	r1, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x33c>)
 800142e:	400a      	ands	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	4b9f      	ldr	r3, [pc, #636]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4b9b      	ldr	r3, [pc, #620]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b9a      	ldr	r3, [pc, #616]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001446:	499c      	ldr	r1, [pc, #624]	; (80016b8 <HAL_RCC_OscConfig+0x340>)
 8001448:	400a      	ands	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d014      	beq.n	800147e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fd0a 	bl	8000e6c <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff fd05 	bl	8000e6c <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e2f9      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0xe6>
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fcf5 	bl	8000e6c <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fcf0 	bl	8000e6c <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e2e4      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	029b      	lsls	r3, r3, #10
 80014a2:	4013      	ands	r3, r2
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x110>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x13e>
 80014b4:	e099      	b.n	80015ea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	2220      	movs	r2, #32
 80014c0:	4013      	ands	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014c4:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80014ca:	2120      	movs	r1, #32
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	2220      	movs	r2, #32
 80014d4:	4393      	bics	r3, r2
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d13e      	bne.n	8001562 <HAL_RCC_OscConfig+0x1ea>
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d13b      	bne.n	8001562 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014ea:	4b71      	ldr	r3, [pc, #452]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2204      	movs	r2, #4
 80014f0:	4013      	ands	r3, r2
 80014f2:	d004      	beq.n	80014fe <HAL_RCC_OscConfig+0x186>
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e2b2      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x344>)
 8001504:	4013      	ands	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2209      	movs	r2, #9
 800151a:	4393      	bics	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001526:	f000 fbeb 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800152a:	0001      	movs	r1, r0
 800152c:	4b60      	ldr	r3, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	220f      	movs	r2, #15
 8001534:	4013      	ands	r3, r2
 8001536:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x348>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	000a      	movs	r2, r1
 800153c:	40da      	lsrs	r2, r3
 800153e:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <HAL_RCC_OscConfig+0x34c>)
 8001540:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001542:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_RCC_OscConfig+0x350>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2513      	movs	r5, #19
 8001548:	197c      	adds	r4, r7, r5
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fc48 	bl	8000de0 <HAL_InitTick>
 8001550:	0003      	movs	r3, r0
 8001552:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001554:	197b      	adds	r3, r7, r5
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d046      	beq.n	80015ea <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800155c:	197b      	adds	r3, r7, r5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	e280      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d027      	beq.n	80015b8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001568:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2209      	movs	r2, #9
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fc77 	bl	8000e6c <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc72 	bl	8000e6c <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e266      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d0f1      	beq.n	8001584 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <HAL_RCC_OscConfig+0x344>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	021a      	lsls	r2, r3, #8
 80015b0:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	e018      	b.n	80015ea <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc52 	bl	8000e6c <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc4d 	bl	8000e6c <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e241      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2204      	movs	r2, #4
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f1      	bne.n	80015ce <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2210      	movs	r2, #16
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x27e>
 80015f4:	e0a1      	b.n	800173a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d140      	bne.n	800167e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x29c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e227      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <HAL_RCC_OscConfig+0x354>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	0a19      	lsrs	r1, r3, #8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	061a      	lsls	r2, r3, #24
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	0b5b      	lsrs	r3, r3, #13
 8001642:	3301      	adds	r3, #1
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	0212      	lsls	r2, r2, #8
 8001648:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	210f      	movs	r1, #15
 8001652:	400b      	ands	r3, r1
 8001654:	491a      	ldr	r1, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x348>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_RCC_OscConfig+0x34c>)
 800165c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_RCC_OscConfig+0x350>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2513      	movs	r5, #19
 8001664:	197c      	adds	r4, r7, r5
 8001666:	0018      	movs	r0, r3
 8001668:	f7ff fbba 	bl	8000de0 <HAL_InitTick>
 800166c:	0003      	movs	r3, r0
 800166e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001670:	197b      	adds	r3, r7, r5
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d060      	beq.n	800173a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001678:	197b      	adds	r3, r7, r5
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	e1f2      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d03f      	beq.n	8001706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0049      	lsls	r1, r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fbea 	bl	8000e6c <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169e:	f7ff fbe5 	bl	8000e6c <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d911      	bls.n	80016d0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1d9      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
 80016b0:	40021000 	.word	0x40021000
 80016b4:	fffeffff 	.word	0xfffeffff
 80016b8:	fffbffff 	.word	0xfffbffff
 80016bc:	ffffe0ff 	.word	0xffffe0ff
 80016c0:	08002db0 	.word	0x08002db0
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004
 80016cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016d0:	4bc9      	ldr	r3, [pc, #804]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d0e0      	beq.n	800169e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016dc:	4bc6      	ldr	r3, [pc, #792]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4ac6      	ldr	r2, [pc, #792]	; (80019fc <HAL_RCC_OscConfig+0x684>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4bc3      	ldr	r3, [pc, #780]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f0:	4bc1      	ldr	r3, [pc, #772]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	0a19      	lsrs	r1, r3, #8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	4bbe      	ldr	r3, [pc, #760]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	e019      	b.n	800173a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001706:	4bbc      	ldr	r3, [pc, #752]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4bbb      	ldr	r3, [pc, #748]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800170c:	49bc      	ldr	r1, [pc, #752]	; (8001a00 <HAL_RCC_OscConfig+0x688>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fbab 	bl	8000e6c <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171c:	f7ff fba6 	bl	8000e6c <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e19a      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800172e:	4bb2      	ldr	r3, [pc, #712]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4013      	ands	r3, r2
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2208      	movs	r2, #8
 8001740:	4013      	ands	r3, r2
 8001742:	d036      	beq.n	80017b2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d019      	beq.n	8001780 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174c:	4baa      	ldr	r3, [pc, #680]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800174e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001750:	4ba9      	ldr	r3, [pc, #676]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fb88 	bl	8000e6c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fb83 	bl	8000e6c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e177      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001774:	4ba0      	ldr	r3, [pc, #640]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d0f1      	beq.n	8001762 <HAL_RCC_OscConfig+0x3ea>
 800177e:	e018      	b.n	80017b2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001780:	4b9d      	ldr	r3, [pc, #628]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001784:	4b9c      	ldr	r3, [pc, #624]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fb6e 	bl	8000e6c <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fb69 	bl	8000e6c <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e15d      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a8:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80017aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1f1      	bne.n	8001796 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2204      	movs	r2, #4
 80017b8:	4013      	ands	r3, r2
 80017ba:	d100      	bne.n	80017be <HAL_RCC_OscConfig+0x446>
 80017bc:	e0ae      	b.n	800191c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2023      	movs	r0, #35	; 0x23
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b8c      	ldr	r3, [pc, #560]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80017c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	055b      	lsls	r3, r3, #21
 80017ce:	4013      	ands	r3, r2
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80017d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0549      	lsls	r1, r1, #21
 80017dc:	430a      	orrs	r2, r1
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017e0:	183b      	adds	r3, r7, r0
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b87      	ldr	r3, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x68c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x68c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x68c>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0049      	lsls	r1, r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001800:	f7ff fb34 	bl	8000e6c <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180a:	f7ff fb2f 	bl	8000e6c <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	; 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e123      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_OscConfig+0x68c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	429a      	cmp	r2, r3
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x4cc>
 8001834:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0049      	lsls	r1, r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	651a      	str	r2, [r3, #80]	; 0x50
 8001842:	e031      	b.n	80018a8 <HAL_RCC_OscConfig+0x530>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_OscConfig+0x4ee>
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800184e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001850:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001852:	496b      	ldr	r1, [pc, #428]	; (8001a00 <HAL_RCC_OscConfig+0x688>)
 8001854:	400a      	ands	r2, r1
 8001856:	651a      	str	r2, [r3, #80]	; 0x50
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800185a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800185e:	496a      	ldr	r1, [pc, #424]	; (8001a08 <HAL_RCC_OscConfig+0x690>)
 8001860:	400a      	ands	r2, r1
 8001862:	651a      	str	r2, [r3, #80]	; 0x50
 8001864:	e020      	b.n	80018a8 <HAL_RCC_OscConfig+0x530>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	23a0      	movs	r3, #160	; 0xa0
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	429a      	cmp	r2, r3
 8001870:	d10e      	bne.n	8001890 <HAL_RCC_OscConfig+0x518>
 8001872:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	00c9      	lsls	r1, r1, #3
 800187c:	430a      	orrs	r2, r1
 800187e:	651a      	str	r2, [r3, #80]	; 0x50
 8001880:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001884:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0049      	lsls	r1, r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	651a      	str	r2, [r3, #80]	; 0x50
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0x530>
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001896:	495a      	ldr	r1, [pc, #360]	; (8001a00 <HAL_RCC_OscConfig+0x688>)
 8001898:	400a      	ands	r2, r1
 800189a:	651a      	str	r2, [r3, #80]	; 0x50
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800189e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a0:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80018a2:	4959      	ldr	r1, [pc, #356]	; (8001a08 <HAL_RCC_OscConfig+0x690>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fadc 	bl	8000e6c <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b8:	e009      	b.n	80018ce <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fad7 	bl	8000e6c <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <HAL_RCC_OscConfig+0x694>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0ca      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80018d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0ef      	beq.n	80018ba <HAL_RCC_OscConfig+0x542>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fac6 	bl	8000e6c <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fac1 	bl	8000e6c <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a46      	ldr	r2, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x694>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0b4      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80018fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001906:	2323      	movs	r3, #35	; 0x23
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001916:	493e      	ldr	r1, [pc, #248]	; (8001a10 <HAL_RCC_OscConfig+0x698>)
 8001918:	400a      	ands	r2, r1
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x5ae>
 8001924:	e09d      	b.n	8001a62 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x5b6>
 800192c:	e076      	b.n	8001a1c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	2b02      	cmp	r3, #2
 8001934:	d145      	bne.n	80019c2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800193c:	4935      	ldr	r1, [pc, #212]	; (8001a14 <HAL_RCC_OscConfig+0x69c>)
 800193e:	400a      	ands	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fa93 	bl	8000e6c <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fa8e 	bl	8000e6c <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e082      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	049b      	lsls	r3, r3, #18
 8001966:	4013      	ands	r3, r2
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <HAL_RCC_OscConfig+0x6a0>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	431a      	orrs	r2, r3
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001986:	430a      	orrs	r2, r1
 8001988:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0449      	lsls	r1, r1, #17
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fa68 	bl	8000e6c <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fa63 	bl	8000e6c <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e057      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	049b      	lsls	r3, r3, #18
 80019bc:	4013      	ands	r3, r2
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x62a>
 80019c0:	e04f      	b.n	8001a62 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80019c8:	4912      	ldr	r1, [pc, #72]	; (8001a14 <HAL_RCC_OscConfig+0x69c>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fa4d 	bl	8000e6c <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa48 	bl	8000e6c <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e03c      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x680>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	049b      	lsls	r3, r3, #18
 80019f2:	4013      	ands	r3, r2
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x660>
 80019f6:	e034      	b.n	8001a62 <HAL_RCC_OscConfig+0x6ea>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	ffff1fff 	.word	0xffff1fff
 8001a00:	fffffeff 	.word	0xfffffeff
 8001a04:	40007000 	.word	0x40007000
 8001a08:	fffffbff 	.word	0xfffffbff
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	efffffff 	.word	0xefffffff
 8001a14:	feffffff 	.word	0xfeffffff
 8001a18:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x6f4>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	025b      	lsls	r3, r3, #9
 8001a34:	401a      	ands	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d10f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	23f0      	movs	r3, #240	; 0xf0
 8001a42:	039b      	lsls	r3, r3, #14
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	401a      	ands	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b00a      	add	sp, #40	; 0x28
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e128      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d91e      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f9e2 	bl	8000e6c <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f9dd 	bl	8000e6c <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e109      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ada:	4b83      	ldr	r3, [pc, #524]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	22f0      	movs	r2, #240	; 0xf0
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b7f      	ldr	r3, [pc, #508]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_ClockConfig+0x8a>
 8001af8:	e089      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b02:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d120      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0e1      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	4013      	ands	r3, r2
 8001b24:	d114      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0d5      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b32:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0ca      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b40:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0c2      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f982 	bl	8000e6c <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d111      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b76:	f7ff f979 	bl	8000e6c <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0a5      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	220c      	movs	r2, #12
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d1ef      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x106>
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d111      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7ff f963 	bl	8000e6c <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e08f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	220c      	movs	r2, #12
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d1ef      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x132>
 8001bc2:	e024      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d11b      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7ff f94d 	bl	8000e6c <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e079      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	220c      	movs	r2, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d1ef      	bne.n	8001bce <HAL_RCC_ClockConfig+0x15e>
 8001bee:	e00e      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff f93c 	bl	8000e6c <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e068      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d21e      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4393      	bics	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c2e:	f7ff f91d 	bl	8000e6c <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f918 	bl	8000e6c <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e044      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d1ee      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4013      	ands	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x27c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d00a      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <HAL_RCC_ClockConfig+0x280>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00da      	lsls	r2, r3, #3
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c98:	f000 f832 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001c9c:	0001      	movs	r1, r0
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x284>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	000a      	movs	r2, r1
 8001cae:	40da      	lsrs	r2, r3
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_ClockConfig+0x288>)
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_ClockConfig+0x28c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	250b      	movs	r5, #11
 8001cba:	197c      	adds	r4, r7, r5
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff f88f 	bl	8000de0 <HAL_InitTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cce:	197b      	adds	r3, r7, r5
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b004      	add	sp, #16
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	00001388 	.word	0x00001388
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	fffff8ff 	.word	0xfffff8ff
 8001cf0:	ffffc7ff 	.word	0xffffc7ff
 8001cf4:	08002db0 	.word	0x08002db0
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b08e      	sub	sp, #56	; 0x38
 8001d04:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	230c      	movs	r3, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d014      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x40>
 8001d16:	d900      	bls.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1a>
 8001d18:	e07b      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x112>
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x24>
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d22:	e076      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d24:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d32:	e07c      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d34:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d38:	e079      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3e:	e076      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	0c9a      	lsrs	r2, r3, #18
 8001d44:	230f      	movs	r3, #15
 8001d46:	401a      	ands	r2, r3
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	0d9a      	lsrs	r2, r3, #22
 8001d52:	2303      	movs	r3, #3
 8001d54:	4013      	ands	r3, r2
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d01a      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	4a35      	ldr	r2, [pc, #212]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d70:	2300      	movs	r3, #0
 8001d72:	69b8      	ldr	r0, [r7, #24]
 8001d74:	69f9      	ldr	r1, [r7, #28]
 8001d76:	f7fe fa73 	bl	8000260 <__aeabi_lmul>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	000b      	movs	r3, r1
 8001d7e:	0010      	movs	r0, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f7fe fa47 	bl	8000220 <__aeabi_uldivmod>
 8001d92:	0002      	movs	r2, r0
 8001d94:	000b      	movs	r3, r1
 8001d96:	0013      	movs	r3, r2
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9a:	e037      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2210      	movs	r2, #16
 8001da2:	4013      	ands	r3, r2
 8001da4:	d01a      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001db0:	2300      	movs	r3, #0
 8001db2:	68b8      	ldr	r0, [r7, #8]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	f7fe fa53 	bl	8000260 <__aeabi_lmul>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f7fe fa27 	bl	8000220 <__aeabi_uldivmod>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dda:	e017      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	0018      	movs	r0, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	0019      	movs	r1, r3
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x140>)
 8001de6:	2300      	movs	r3, #0
 8001de8:	f7fe fa3a 	bl	8000260 <__aeabi_lmul>
 8001dec:	0002      	movs	r2, r0
 8001dee:	000b      	movs	r3, r1
 8001df0:	0010      	movs	r0, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	001c      	movs	r4, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	001d      	movs	r5, r3
 8001dfc:	0022      	movs	r2, r4
 8001dfe:	002b      	movs	r3, r5
 8001e00:	f7fe fa0e 	bl	8000220 <__aeabi_uldivmod>
 8001e04:	0002      	movs	r2, r0
 8001e06:	000b      	movs	r3, r1
 8001e08:	0013      	movs	r3, r2
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e10:	e00d      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0b5b      	lsrs	r3, r3, #13
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	3301      	adds	r3, #1
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	0212      	lsls	r2, r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e2c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b00e      	add	sp, #56	; 0x38
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	003d0900 	.word	0x003d0900
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	007a1200 	.word	0x007a1200
 8001e48:	08002dc0 	.word	0x08002dc0

08001e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e07b      	b.n	8001f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	2382      	movs	r3, #130	; 0x82
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d009      	beq.n	8001e86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
 8001e78:	e005      	b.n	8001e86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2251      	movs	r2, #81	; 0x51
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2250      	movs	r2, #80	; 0x50
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7fe fe60 	bl	8000b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2251      	movs	r2, #81	; 0x51
 8001eac:	2102      	movs	r1, #2
 8001eae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	2382      	movs	r3, #130	; 0x82
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	401a      	ands	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	2384      	movs	r3, #132	; 0x84
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68d9      	ldr	r1, [r3, #12]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	400b      	ands	r3, r1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	400b      	ands	r3, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6999      	ldr	r1, [r3, #24]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2138      	movs	r1, #56	; 0x38
 8001f08:	400b      	ands	r3, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	400b      	ands	r3, r1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	0011      	movs	r1, r2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	019b      	lsls	r3, r3, #6
 8001f20:	401a      	ands	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	0c1b      	lsrs	r3, r3, #16
 8001f30:	2204      	movs	r2, #4
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2251      	movs	r2, #81	; 0x51
 8001f50:	2101      	movs	r1, #1
 8001f52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e032      	b.n	8001fd6 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2239      	movs	r2, #57	; 0x39
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2238      	movs	r2, #56	; 0x38
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe fe32 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2239      	movs	r2, #57	; 0x39
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	f000 fc1e 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	223e      	movs	r2, #62	; 0x3e
 8001fa8:	2101      	movs	r1, #1
 8001faa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	223a      	movs	r2, #58	; 0x3a
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	5499      	strb	r1, [r3, r2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	223b      	movs	r2, #59	; 0x3b
 8001fb8:	2101      	movs	r1, #1
 8001fba:	5499      	strb	r1, [r3, r2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	223c      	movs	r2, #60	; 0x3c
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223d      	movs	r2, #61	; 0x3d
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2239      	movs	r2, #57	; 0x39
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2239      	movs	r2, #57	; 0x39
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d001      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e031      	b.n	800205c <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2239      	movs	r2, #57	; 0x39
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	05db      	lsls	r3, r3, #23
 8002018:	429a      	cmp	r2, r3
 800201a:	d004      	beq.n	8002026 <HAL_TIM_Base_Start_IT+0x46>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_TIM_Base_Start_IT+0x84>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d111      	bne.n	800204a <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2207      	movs	r2, #7
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b06      	cmp	r3, #6
 8002036:	d010      	beq.n	800205a <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2101      	movs	r1, #1
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002048:	e007      	b.n	800205a <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010800 	.word	0x40010800

08002068 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e032      	b.n	80020e0 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2239      	movs	r2, #57	; 0x39
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d107      	bne.n	8002096 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2238      	movs	r2, #56	; 0x38
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f829 	bl	80020e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2239      	movs	r2, #57	; 0x39
 800209a:	2102      	movs	r1, #2
 800209c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	0019      	movs	r1, r3
 80020a8:	0010      	movs	r0, r2
 80020aa:	f000 fb99 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223e      	movs	r2, #62	; 0x3e
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	223a      	movs	r2, #58	; 0x3a
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	223b      	movs	r2, #59	; 0x3b
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	223c      	movs	r2, #60	; 0x3c
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	223d      	movs	r2, #61	; 0x3d
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2239      	movs	r2, #57	; 0x39
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	230f      	movs	r3, #15
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <HAL_TIM_IC_Start_IT+0x22>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	223a      	movs	r2, #58	; 0x3a
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	e013      	b.n	8002142 <HAL_TIM_IC_Start_IT+0x4a>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d104      	bne.n	800212a <HAL_TIM_IC_Start_IT+0x32>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	223b      	movs	r2, #59	; 0x3b
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e00b      	b.n	8002142 <HAL_TIM_IC_Start_IT+0x4a>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d104      	bne.n	800213a <HAL_TIM_IC_Start_IT+0x42>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	223c      	movs	r2, #60	; 0x3c
 8002134:	5c9b      	ldrb	r3, [r3, r2]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	e003      	b.n	8002142 <HAL_TIM_IC_Start_IT+0x4a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	223d      	movs	r2, #61	; 0x3d
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	210e      	movs	r1, #14
 8002144:	187a      	adds	r2, r7, r1
 8002146:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002148:	187b      	adds	r3, r7, r1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d001      	beq.n	8002154 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e08b      	b.n	800226c <HAL_TIM_IC_Start_IT+0x174>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <HAL_TIM_IC_Start_IT+0x6c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	223a      	movs	r2, #58	; 0x3a
 800215e:	2102      	movs	r1, #2
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	e013      	b.n	800218c <HAL_TIM_IC_Start_IT+0x94>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d104      	bne.n	8002174 <HAL_TIM_IC_Start_IT+0x7c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223b      	movs	r2, #59	; 0x3b
 800216e:	2102      	movs	r1, #2
 8002170:	5499      	strb	r1, [r3, r2]
 8002172:	e00b      	b.n	800218c <HAL_TIM_IC_Start_IT+0x94>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b08      	cmp	r3, #8
 8002178:	d104      	bne.n	8002184 <HAL_TIM_IC_Start_IT+0x8c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	223c      	movs	r2, #60	; 0x3c
 800217e:	2102      	movs	r1, #2
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	e003      	b.n	800218c <HAL_TIM_IC_Start_IT+0x94>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223d      	movs	r2, #61	; 0x3d
 8002188:	2102      	movs	r1, #2
 800218a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d02a      	beq.n	80021e8 <HAL_TIM_IC_Start_IT+0xf0>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d830      	bhi.n	80021fa <HAL_TIM_IC_Start_IT+0x102>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d01b      	beq.n	80021d6 <HAL_TIM_IC_Start_IT+0xde>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d82a      	bhi.n	80021fa <HAL_TIM_IC_Start_IT+0x102>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IC_Start_IT+0xba>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d009      	beq.n	80021c4 <HAL_TIM_IC_Start_IT+0xcc>
 80021b0:	e023      	b.n	80021fa <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2102      	movs	r1, #2
 80021be:	430a      	orrs	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
      break;
 80021c2:	e01f      	b.n	8002204 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2104      	movs	r1, #4
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]
      break;
 80021d4:	e016      	b.n	8002204 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2108      	movs	r1, #8
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
      break;
 80021e6:	e00d      	b.n	8002204 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2110      	movs	r1, #16
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]
      break;
 80021f8:	e004      	b.n	8002204 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
      break;
 8002202:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d12b      	bne.n	8002266 <HAL_TIM_IC_Start_IT+0x16e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	0018      	movs	r0, r3
 8002218:	f000 fcde 	bl	8002bd8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	05db      	lsls	r3, r3, #23
 8002224:	429a      	cmp	r2, r3
 8002226:	d004      	beq.n	8002232 <HAL_TIM_IC_Start_IT+0x13a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_TIM_IC_Start_IT+0x17c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_TIM_IC_Start_IT+0x15e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2207      	movs	r2, #7
 800223a:	4013      	ands	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d010      	beq.n	8002266 <HAL_TIM_IC_Start_IT+0x16e>
      {
        __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e007      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x16e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b004      	add	sp, #16
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40010800 	.word	0x40010800

08002278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d124      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d11d      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2203      	movs	r2, #3
 80022a2:	4252      	negs	r2, r2
 80022a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fe fa36 	bl	800072c <HAL_TIM_IC_CaptureCallback>
 80022c0:	e007      	b.n	80022d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fa73 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fa77 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2204      	movs	r2, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d125      	bne.n	8002332 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d11e      	bne.n	8002332 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2205      	movs	r2, #5
 80022fa:	4252      	negs	r2, r2
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f7fe fa09 	bl	800072c <HAL_TIM_IC_CaptureCallback>
 800231a:	e007      	b.n	800232c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fa46 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fa4a 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2208      	movs	r2, #8
 800233a:	4013      	ands	r3, r2
 800233c:	2b08      	cmp	r3, #8
 800233e:	d124      	bne.n	800238a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2208      	movs	r2, #8
 8002348:	4013      	ands	r3, r2
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11d      	bne.n	800238a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2209      	movs	r2, #9
 8002354:	4252      	negs	r2, r2
 8002356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2204      	movs	r2, #4
 800235c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe f9dd 	bl	800072c <HAL_TIM_IC_CaptureCallback>
 8002372:	e007      	b.n	8002384 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0018      	movs	r0, r3
 8002378:	f000 fa1a 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fa1e 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2210      	movs	r2, #16
 8002392:	4013      	ands	r3, r2
 8002394:	2b10      	cmp	r3, #16
 8002396:	d125      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2210      	movs	r2, #16
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d11e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2211      	movs	r2, #17
 80023ac:	4252      	negs	r2, r2
 80023ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2208      	movs	r2, #8
 80023b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fe f9b0 	bl	800072c <HAL_TIM_IC_CaptureCallback>
 80023cc:	e007      	b.n	80023de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f9ed 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f9f1 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10f      	bne.n	8002412 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d108      	bne.n	8002412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2202      	movs	r2, #2
 8002406:	4252      	negs	r2, r2
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f9c7 	bl	80027a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	4013      	ands	r3, r2
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d10f      	bne.n	8002440 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	4013      	ands	r3, r2
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d108      	bne.n	8002440 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2241      	movs	r2, #65	; 0x41
 8002434:	4252      	negs	r2, r2
 8002436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f9c8 	bl	80027d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2238      	movs	r2, #56	; 0x38
 8002460:	5c9b      	ldrb	r3, [r3, r2]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_TIM_IC_ConfigChannel+0x22>
 8002466:	2302      	movs	r3, #2
 8002468:	e08c      	b.n	8002584 <HAL_TIM_IC_ConfigChannel+0x13c>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2238      	movs	r2, #56	; 0x38
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f000 f9f4 	bl	8002874 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	210c      	movs	r1, #12
 8002498:	438a      	bics	r2, r1
 800249a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6999      	ldr	r1, [r3, #24]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	e062      	b.n	8002576 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d11c      	bne.n	80024f0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f000 fa53 	bl	8002970 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	492d      	ldr	r1, [pc, #180]	; (800258c <HAL_TIM_IC_ConfigChannel+0x144>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6999      	ldr	r1, [r3, #24]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	021a      	lsls	r2, r3, #8
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	619a      	str	r2, [r3, #24]
 80024ee:	e042      	b.n	8002576 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11b      	bne.n	800252e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f000 faa7 	bl	8002a58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	210c      	movs	r1, #12
 8002516:	438a      	bics	r2, r1
 8002518:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69d9      	ldr	r1, [r3, #28]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	61da      	str	r2, [r3, #28]
 800252c:	e023      	b.n	8002576 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d11c      	bne.n	800256e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f000 fac8 	bl	8002ad8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	490e      	ldr	r1, [pc, #56]	; (800258c <HAL_TIM_IC_ConfigChannel+0x144>)
 8002554:	400a      	ands	r2, r1
 8002556:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69d9      	ldr	r1, [r3, #28]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	021a      	lsls	r2, r3, #8
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	61da      	str	r2, [r3, #28]
 800256c:	e003      	b.n	8002576 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800256e:	2317      	movs	r3, #23
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2238      	movs	r2, #56	; 0x38
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]

  return status;
 800257e:	2317      	movs	r3, #23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b006      	add	sp, #24
 800258a:	bd80      	pop	{r7, pc}
 800258c:	fffff3ff 	.word	0xfffff3ff

08002590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	230f      	movs	r3, #15
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2238      	movs	r2, #56	; 0x38
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_TIM_ConfigClockSource+0x20>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0bc      	b.n	800272a <HAL_TIM_ConfigClockSource+0x19a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2238      	movs	r2, #56	; 0x38
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2239      	movs	r2, #57	; 0x39
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2277      	movs	r2, #119	; 0x77
 80025cc:	4393      	bics	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_TIM_ConfigClockSource+0x1a4>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	0192      	lsls	r2, r2, #6
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d040      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xde>
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0192      	lsls	r2, r2, #6
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d900      	bls.n	80025f6 <HAL_TIM_ConfigClockSource+0x66>
 80025f4:	e088      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	0152      	lsls	r2, r2, #5
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d100      	bne.n	8002600 <HAL_TIM_ConfigClockSource+0x70>
 80025fe:	e088      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x182>
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	0152      	lsls	r2, r2, #5
 8002604:	4293      	cmp	r3, r2
 8002606:	d900      	bls.n	800260a <HAL_TIM_ConfigClockSource+0x7a>
 8002608:	e07e      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 800260a:	2b70      	cmp	r3, #112	; 0x70
 800260c:	d018      	beq.n	8002640 <HAL_TIM_ConfigClockSource+0xb0>
 800260e:	d900      	bls.n	8002612 <HAL_TIM_ConfigClockSource+0x82>
 8002610:	e07a      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 8002612:	2b60      	cmp	r3, #96	; 0x60
 8002614:	d04f      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x126>
 8002616:	d900      	bls.n	800261a <HAL_TIM_ConfigClockSource+0x8a>
 8002618:	e076      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 800261a:	2b50      	cmp	r3, #80	; 0x50
 800261c:	d03b      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x106>
 800261e:	d900      	bls.n	8002622 <HAL_TIM_ConfigClockSource+0x92>
 8002620:	e072      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d057      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x146>
 8002626:	d900      	bls.n	800262a <HAL_TIM_ConfigClockSource+0x9a>
 8002628:	e06e      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 800262a:	2b30      	cmp	r3, #48	; 0x30
 800262c:	d063      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x166>
 800262e:	d86b      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d060      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x166>
 8002634:	d868      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d05d      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x166>
 800263a:	2b10      	cmp	r3, #16
 800263c:	d05b      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x166>
 800263e:	e063      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f000 faa2 	bl	8002b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2277      	movs	r2, #119	; 0x77
 8002660:	4313      	orrs	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	609a      	str	r2, [r3, #8]
      break;
 800266c:	e052      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f000 fa8b 	bl	8002b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	01c9      	lsls	r1, r1, #7
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
      break;
 8002694:	e03e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	001a      	movs	r2, r3
 80026a4:	f000 f936 	bl	8002914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2150      	movs	r1, #80	; 0x50
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 fa58 	bl	8002b64 <TIM_ITRx_SetConfig>
      break;
 80026b4:	e02e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	001a      	movs	r2, r3
 80026c4:	f000 f996 	bl	80029f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2160      	movs	r1, #96	; 0x60
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fa48 	bl	8002b64 <TIM_ITRx_SetConfig>
      break;
 80026d4:	e01e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	001a      	movs	r2, r3
 80026e4:	f000 f916 	bl	8002914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 fa38 	bl	8002b64 <TIM_ITRx_SetConfig>
      break;
 80026f4:	e00e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f000 fa2f 	bl	8002b64 <TIM_ITRx_SetConfig>
      break;
 8002706:	e005      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002708:	230f      	movs	r3, #15
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
      break;
 8002710:	e000      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002712:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2239      	movs	r2, #57	; 0x39
 8002718:	2101      	movs	r1, #1
 800271a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]

  return status;
 8002724:	230f      	movs	r3, #15
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	ffff00ff 	.word	0xffff00ff

08002738 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d01e      	beq.n	800278a <HAL_TIM_ReadCapturedValue+0x52>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d820      	bhi.n	8002794 <HAL_TIM_ReadCapturedValue+0x5c>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d013      	beq.n	8002780 <HAL_TIM_ReadCapturedValue+0x48>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b08      	cmp	r3, #8
 800275c:	d81a      	bhi.n	8002794 <HAL_TIM_ReadCapturedValue+0x5c>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_TIM_ReadCapturedValue+0x34>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d005      	beq.n	8002776 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800276a:	e013      	b.n	8002794 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	60fb      	str	r3, [r7, #12]
      break;
 8002774:	e00f      	b.n	8002796 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	60fb      	str	r3, [r7, #12]
      break;
 800277e:	e00a      	b.n	8002796 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	60fb      	str	r3, [r7, #12]
      break;
 8002788:	e005      	b.n	8002796 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	60fb      	str	r3, [r7, #12]
      break;
 8002792:	e000      	b.n	8002796 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002794:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	05db      	lsls	r3, r3, #23
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d003      	beq.n	8002802 <TIM_Base_SetConfig+0x22>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <TIM_Base_SetConfig+0x8c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d108      	bne.n	8002814 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2270      	movs	r2, #112	; 0x70
 8002806:	4393      	bics	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	429a      	cmp	r2, r3
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0x46>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <TIM_Base_SetConfig+0x8c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <TIM_Base_SetConfig+0x90>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	4393      	bics	r3, r2
 800283e:	001a      	movs	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	615a      	str	r2, [r3, #20]
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40010800 	.word	0x40010800
 8002870:	fffffcff 	.word	0xfffffcff

08002874 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2201      	movs	r2, #1
 8002888:	4393      	bics	r3, r2
 800288a:	001a      	movs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d003      	beq.n	80028ae <TIM_TI1_SetConfig+0x3a>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <TIM_TI1_SetConfig+0x9c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <TIM_TI1_SetConfig+0x3e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <TIM_TI1_SetConfig+0x40>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <TIM_TI1_SetConfig+0x56>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2203      	movs	r2, #3
 80028bc:	4393      	bics	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e003      	b.n	80028d2 <TIM_TI1_SetConfig+0x5e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	22f0      	movs	r2, #240	; 0xf0
 80028d6:	4393      	bics	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	4013      	ands	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	220a      	movs	r2, #10
 80028ec:	4393      	bics	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	220a      	movs	r2, #10
 80028f4:	4013      	ands	r3, r2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	621a      	str	r2, [r3, #32]
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b006      	add	sp, #24
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40010800 	.word	0x40010800

08002914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	2201      	movs	r2, #1
 800292c:	4393      	bics	r3, r2
 800292e:	001a      	movs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	22f0      	movs	r2, #240	; 0xf0
 800293e:	4393      	bics	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	220a      	movs	r2, #10
 8002950:	4393      	bics	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}

08002970 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	2210      	movs	r2, #16
 8002984:	4393      	bics	r3, r2
 8002986:	001a      	movs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <TIM_TI2_SetConfig+0x7c>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <TIM_TI2_SetConfig+0x80>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	031b      	lsls	r3, r3, #12
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	22a0      	movs	r2, #160	; 0xa0
 80029c4:	4393      	bics	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	22a0      	movs	r2, #160	; 0xa0
 80029ce:	4013      	ands	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	fffffcff 	.word	0xfffffcff
 80029f0:	ffff0fff 	.word	0xffff0fff

080029f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	2210      	movs	r2, #16
 8002a06:	4393      	bics	r3, r2
 8002a08:	001a      	movs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <TIM_TI2_ConfigInputStage+0x60>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	031b      	lsls	r3, r3, #12
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	22a0      	movs	r2, #160	; 0xa0
 8002a30:	4393      	bics	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b006      	add	sp, #24
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	ffff0fff 	.word	0xffff0fff

08002a58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <TIM_TI3_SetConfig+0x78>)
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2203      	movs	r2, #3
 8002a82:	4393      	bics	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	22f0      	movs	r2, #240	; 0xf0
 8002a92:	4393      	bics	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	22ff      	movs	r2, #255	; 0xff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <TIM_TI3_SetConfig+0x7c>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	23a0      	movs	r3, #160	; 0xa0
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fffffeff 	.word	0xfffffeff
 8002ad4:	fffff5ff 	.word	0xfffff5ff

08002ad8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <TIM_TI4_SetConfig+0x7c>)
 8002aec:	401a      	ands	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <TIM_TI4_SetConfig+0x80>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <TIM_TI4_SetConfig+0x84>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <TIM_TI4_SetConfig+0x88>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	031a      	lsls	r2, r3, #12
 8002b32:	23a0      	movs	r3, #160	; 0xa0
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	4013      	ands	r3, r2
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b006      	add	sp, #24
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	ffffefff 	.word	0xffffefff
 8002b58:	fffffcff 	.word	0xfffffcff
 8002b5c:	ffff0fff 	.word	0xffff0fff
 8002b60:	ffff5fff 	.word	0xffff5fff

08002b64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2270      	movs	r2, #112	; 0x70
 8002b78:	4393      	bics	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	2207      	movs	r2, #7
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	609a      	str	r2, [r3, #8]
}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <TIM_ETR_SetConfig+0x3c>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b006      	add	sp, #24
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	ffff00ff 	.word	0xffff00ff

08002bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	221f      	movs	r2, #31
 8002be8:	4013      	ands	r3, r2
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	43d2      	mvns	r2, r2
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	211f      	movs	r1, #31
 8002c08:	400b      	ands	r3, r1
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4099      	lsls	r1, r3
 8002c0e:	000b      	movs	r3, r1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	621a      	str	r2, [r3, #32]
}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b006      	add	sp, #24
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2238      	movs	r2, #56	; 0x38
 8002c2e:	5c9b      	ldrb	r3, [r3, r2]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e03d      	b.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2238      	movs	r2, #56	; 0x38
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2239      	movs	r2, #57	; 0x39
 8002c44:	2102      	movs	r1, #2
 8002c46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2270      	movs	r2, #112	; 0x70
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	05db      	lsls	r3, r3, #23
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d004      	beq.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d10c      	bne.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2280      	movs	r2, #128	; 0x80
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2239      	movs	r2, #57	; 0x39
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2238      	movs	r2, #56	; 0x38
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40010800 	.word	0x40010800

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	2600      	movs	r6, #0
 8002cc4:	4d0c      	ldr	r5, [pc, #48]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc6:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc8:	1b64      	subs	r4, r4, r5
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	42a6      	cmp	r6, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	f000 f821 	bl	8002d18 <_init>
 8002cd6:	4d0a      	ldr	r5, [pc, #40]	; (8002d00 <__libc_init_array+0x40>)
 8002cd8:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <__libc_init_array+0x44>)
 8002cda:	1b64      	subs	r4, r4, r5
 8002cdc:	10a4      	asrs	r4, r4, #2
 8002cde:	42a6      	cmp	r6, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	00b3      	lsls	r3, r6, #2
 8002ce6:	58eb      	ldr	r3, [r5, r3]
 8002ce8:	4798      	blx	r3
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	00b3      	lsls	r3, r6, #2
 8002cf0:	58eb      	ldr	r3, [r5, r3]
 8002cf2:	4798      	blx	r3
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08002dd4 	.word	0x08002dd4
 8002cfc:	08002dd4 	.word	0x08002dd4
 8002d00:	08002dd4 	.word	0x08002dd4
 8002d04:	08002dd8 	.word	0x08002dd8

08002d08 <memset>:
 8002d08:	0003      	movs	r3, r0
 8002d0a:	1882      	adds	r2, r0, r2
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	7019      	strb	r1, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
